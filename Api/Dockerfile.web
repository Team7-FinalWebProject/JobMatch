# syntax=docker/dockerfile:1

###Dockerfile for Heroku

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/engine/reference/builder/

ARG PYTHON_VERSION=3.11.4
FROM python:${PYTHON_VERSION}-alpine as backutopia

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

WORKDIR /app

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
COPY requirements.txt requirements.txt
RUN apk add --no-cache postgresql-libs && \
 apk add --no-cache --virtual .build-deps gcc musl-dev postgresql-dev && \
 python3 -m pip install --upgrade pip && \
 python3 -m pip install -r requirements.txt --no-cache-dir && \
 apk --purge del .build-deps

# RUN apk --no-cache add curl

# Switch to the non-privileged user to run the application.
USER appuser

# Copy the source code into the container.
COPY . .
## Temp workaround should not longer be needed
# COPY data/database_heroku.py data/database.py
# COPY common/auth_heroku.py common/auth.py

# Expose the port that the application listens on.
EXPOSE 8000

# Run the application (heroku.yml)
# CMD [ "python", "-m", "main" ]
# CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "$PORT"]

